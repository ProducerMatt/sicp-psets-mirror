;; 6.001 Spring '98
;; Problem Set 11 Solutions
;; ========================

;; Tutorial Exercise 1  (4.35)
;; ===================

;; exclusive version
(define (an-integer-between low high)
  (let ((current (+ 1 low)))
    (if (>= current high)
	(amb)
	(amb current (an-integer-between current high)))))

;; (an-integer-between 3 8)  ==>  4 5 6 7

;; inclusive version
(define (an-integer-between low high)
  (if (> low high)
      (amb)
      (amb low (an-integer-between (+ 1 low) high))))

;; (an-integer-between 3 8)  ==>  3 4 5 6 7 8


;; Tutorial Exercise 2  (4.36)
;; ===================

Using an-integer-starting-from instead of the bounded ranges of 
an-integer-between will not generate all pythagorean triples.  This is
because we will not be searching through all triples -- we will be
varying only the third number in the triples.  We will choose the
first value for each of the first two numbers in the triple and then
iterate through the choices for the third number until we hit a
pythagorean triple, because our search is depth-first using
chronological backtracking.  When asked for another pythagorean triple
we will again vary only the third number.  Since we will never run out of
choices for the third number we will never backtrack to the choice
points for the first two numbers.

;; this way generates triples that are sorted low -> high

(define (a-pythagorean-triple-from low)
  (let ((k (an-integer-starting-from low)))
    (let ((j (an-integer-between low k)))
      (let ((i (an-integer-between low j)))
	;;(newline)
	;;(display (list i j k))
	(require (= (+ (* i i) (* j j)) (* k k)))
	(list i j k)))))

;; this way generates all combinations of triples (unsorted)

(define (a-pythagorean-triple-from low)
  (let ((sum (an-integer-starting-from (+ 2 low))))
    (let ((i (an-integer-between low (- sum 2))))
      (let ((j (an-integer-between low (- sum (+ 1 i)))))
	(let ((k (- sum (+ i j))))
	  ;;(newline)
	  ;;(display (list i j k))
	  (require (= (+ (* i i) (* j j)) (* k k)))
	  (list i j k))))))

;;; Amb-Eval input:
(a-pythagorean-triple-from 1)

(3 4 5)
(6 8 10) *
(5 12 13)
(9 12 15) *
(8 15 17)
(12 16 20) *
(15 20 25) *
(7 24 25)
(10 24 26) *
(20 21 29)
(18 24 30) *
(16 30 34) *
(21 28 35) *
(12 35 37)
(15 36 39) *
(24 32 40) *
(9 40 41)

;; Tutorial Exercise 3  (4.37)
;; ===================

Yes, this is much more efficient because we are only "searching"
through i & j, once we have choosen them, we know what k should be
(if it exists) so we just need to check that it's in bounds and that
it's an integer.

;; Computer Exercise 1  (4.38)
;; ===================

;; originally:
((baker 3) (cooper 2) (fletcher 4) (miller 5) (smith 1))

;; comment out this line!
;; (require (not (= (abs (- smith fletcher)) 1)))

;; relaxed requirements
((baker 1) (cooper 2) (fletcher 4) (miller 3) (smith 5))
((baker 1) (cooper 2) (fletcher 4) (miller 5) (smith 3))
((baker 1) (cooper 4) (fletcher 2) (miller 5) (smith 3))
((baker 3) (cooper 2) (fletcher 4) (miller 5) (smith 1))
((baker 3) (cooper 4) (fletcher 2) (miller 5) (smith 1))

;; Computer Exercise 2
;; ===================

;; a  (4.39)

;; Does the order of the restrictions affect the answer or the time
;; to compute the answer?

It will not change the set of answers to the problem nor will
it change the order in which the solutions are found.  The order
of restrictions can affect the time.  If there are many restrictions,
or if a restriction takes a long time to evaluate, filtering by the
most discriminating requirements first (that is, requirements which 
fail to be met most often) can limit the time it takes to
check each combination in our search space.

(define (multiple-dwelling)
  (let ((baker    (amb 1 2 3 4 5))
	(cooper   (amb 1 2 3 4 5))
	(fletcher (amb 1 2 3 4 5))
	(miller   (amb 1 2 3 4 5))
	(smith    (amb 1 2 3 4 5)))

    ;; this test chops out about 1/2 of the inputs
    (require (> miller cooper))

    ;; 5! of all possible 5^5 combinations are distinct
    ;; this test chops out ~ 96% of the inputs, but takes
    ;; longer to compute == tradeoff!
    (require (distinct (list baker cooper fletcher miller smith)))

    ;; these tests chop out about 1/3 of the inputs
    (require (not (= (abs (- smith fletcher)) 1)))
    (require (not (= (abs (- fletcher cooper)) 1)))

    ;; these chop about about 1/5 of the inputs
    (require (not (= baker 5)))
    (require (not (= cooper 1)))
    (require (not (= fletcher 5)))
    (require (not (= fletcher 1)))

    (list (list 'baker baker)
	  (list 'cooper cooper)
	  (list 'fletcher fletcher)
	  (list 'miller miller)
	  (list 'smith smith))))

;; the above example sped up computation: from about 7.5 sec to about 5.7 sec.

;; b  (4.40) 

Number of combinations before the distinction requirement is asserted:
  5^5 = 3125

Number of combinations after:
  5! = 120

(define (multiple-dwelling)

  ;; distinct has been distributed throughout the nested let

  ;; fletcher has the most individual restrictions
  ;; (require (not (= fletcher 5)))
  ;; (require (not (= fletcher 1)))
  (let ((fletcher    (amb 2 3 4)))

    ;; cooper has an individual restriction & one with fletcher
    ;; (require (not (= cooper 1)))
    (let ((cooper   (amb 2 3 4 5)))
      (require (not (= cooper fletcher)))
      (require (not (= (abs (- fletcher cooper)) 1)))
      
      ;; baker has an individual restriction
      ;; (require (not (= baker 5)))
      (let ((baker (amb 1 2 3 4)))
	(require (not (= baker fletcher)))
	(require (not (= baker cooper)))
	
	(let ((miller   (amb 1 2 3 4 5)))
	  (require (not (= miller fletcher)))
	  (require (not (= miller cooper)))
	  (require (not (= miller baker)))
	  (require (> miller cooper))
	  
	  (let ((smith    (amb 1 2 3 4 5)))
	    (require (not (= smith fletcher)))
	    (require (not (= smith cooper)))
	    (require (not (= smith baker)))
	    (require (not (= smith miller)))
	    (require (not (= (abs (- smith fletcher)) 1)))
	    
	    (list (list 'baker baker)
		  (list 'cooper cooper)
		  (list 'fletcher fletcher)
		  (list 'miller miller)
		  (list 'smith smith))))))))

;; the above code is VERY much faster (takes less than a second)

;; Computer Exercise 3  (4.43)
;; ===================

(define (lornas-dad)
  (let ((downing-daughter (amb 'gabrielle 'lorna 'mary-ann 'melissa 'rosalind))
	(downing-yacht    (amb 'melissa)))
    (require (not (eq? downing-daughter downing-yacht)))
    (let ((hall-daughter (amb 'gabrielle 'lorna 'mary-ann 'melissa 'rosalind))
	  (hall-yacht    (amb 'rosalind)))
      (require (not (eq? hall-daughter hall-yacht)))
      (let ((hood-daughter (amb 'melissa))
	    (hood-yacht    (amb 'gabrielle)))
	(require (not (eq? hood-daughter hood-yacht)))
	(let ((moore-daughter (amb 'mary-ann))
	      (moore-yacht    (amb 'lorna)))
	  (require (not (eq? moore-daughter moore-yacht)))
	  (let ((parker-daughter (amb 'gabrielle 'lorna 'mary-ann 'melissa 'rosalind))
		(parker-yacht    (amb 'gabrielle 'lorna 'mary-ann 'melissa 'rosalind)))
	    (require (not (eq? parker-daughter parker-yacht)))

	    (require (distinct (list downing-daughter 
				     hall-daughter
				     hood-daughter
				     moore-daughter
				     parker-daughter)))
	    (require (distinct (list downing-yacht 
				     hall-yacht
				     hood-yacht
				     moore-yacht
				     parker-yacht)))
				     
	    (let ((table (list
			  (list 'downing downing-daughter downing-yacht)
			  (list 'hall hall-daughter hall-yacht)
			  (list 'hood hood-daughter hood-yacht)
			  (list 'moore moore-daughter moore-yacht)
			  (list 'parker parker-daughter parker-yacht))))
	      (require (eq? (yacht (father 'gabrielle table) table)
			    parker-daughter))
	      (list (father 'lorna table) 'is 'the 'father 'of 'lorna))))))))

;; some helper procedures
(define (father daughter lst)
  (cond ((null? lst) '())
	((eq? (car (cdr (car lst))) daughter) 
	 (car (car lst)))
	(else (father daughter (cdr lst)))))

(define (yacht father lst)
  (cond ((null? lst) '())
	((eq? (car (car lst)) father) (car (cdr (cdr (car lst)))))
	(else (yacht father (cdr lst)))))


;;; Amb-Eval input:
(lornas-dad)

(downing is the father of lorna)

;; ========================
;; If we don't know that mary-ann's last name is moore...

;; change this line:
;; (let ((moore-daughter (amb 'gabrielle 'lorna 'mary-ann 'melissa 'rosalind))

;;; Amb-Eval input:
(lornas-dad)

(downing is the father of lorna)
(parker is the father of lorna)

;; Computer Exercise 4  (4.50)
;; ===================

;; add this to analyze evaluator
((ramb? exp) (analyze-amb (ramb->amb exp)))    

(define (ramb? exp) (tagged-list? exp 'ramb))

(define (ramb->amb exp)
  (cons 'amb (shuffle (cdr exp))))

(define (shuffle lst)
  (define (iter result rest)
    (if (null? rest)
	result
	(let ((item (list-ref rest (random (length rest)))))
	  (iter (cons item result) (delq item rest)))))
  (iter '() lst))

Because the grammar rules can be applied in a random order
to a list of objects which has been randomized, the sentences
will be more interesting and varied.

;; Computer Exercise 5  (4.51)
;; ===================

;; add this to analyze evaluator
((permanent-assignment? exp) (analyze-permanent-assignment exp))

(define (permanent-assignment? exp) (tagged-list? exp 'permanent-set!))

(define (analyze-permanent-assignment exp)
  (let ((var (assignment-variable exp))
        (vproc (analyze (assignment-value exp))))
    (lambda (env succeed fail)
      (vproc env
             (lambda (val fail2)   
	       (set-variable-value! var val env)
	       (succeed 'ok
			fail2))
             fail))))


(define count 0)

(let ((x (an-element-of '(a b c)))
      (y (an-element-of '(a b c))))
  (permanent-set! count (+ count 1))
  (require (not (eq? x y)))
  (list x y count))

(a b 2)
(a c 3)
(b a 4)
(b c 6)
(c a 7)
(c b 8)

Using set! instead of permanent-set! would have caused count to be
reset to 0 on every failure, resulting in (a b 1) (a c 1) ...

;; Computer Exercise 6  (4.52)
;; ===================

;; add this to analyze evaluator
((if-fail? exp) (analyze-if-fail exp))

(define (if-fail? exp) (tagged-list? exp 'if-fail))

(define (if-fail-first exp) (cadr exp))
(define (if-fail-second exp) (caddr exp))

(define (analyze-if-fail exp)
  (let ((first (analyze (if-fail-first exp)))
	(second (analyze (if-fail-second exp))))
    (lambda (env success fail)
      (first env
	     success
	     (lambda ()
	       (second env success fail))))))

(if-fail (amb 1 2) (amb 3 4))

all-values:

1
2
3
4

;; Computer Exercise 7  (4.53)
;; ===================

(define (prime-sum-pair l1 l2)
  (let ((a (an-element-of l1))
	(b (an-element-of l2)))
    (require (prime? (+ a b)))
    (list a b)))
	
(let ((pairs '()))
  (if-fail (let ((p (prime-sum-pair '(1 3 5 8) '(20 35 110))))
	     (permanent-set! pairs (cons p pairs))
	     (amb))
	   pairs))

It finds all the pairs that sum to a prime.  It then permanently
adds each pair to the list.  When it has found all the pairs, it
fails and if-fail catches it, and returns the list.  Note that
the list will be in reverse order since each pair found is added
to the front:

((8 35) (3 110) (3 20))

